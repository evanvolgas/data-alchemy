{
  "metadata": {
    "version": "1.0",
    "created_by": "DataAlchemy",
    "total_features": 86,
    "original_features": 14,
    "engineered_features": 124
  },
  "features": [
    {
      "name": "account_age_days_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between account_age_days and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['account_age_days_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_support_tickets_monthly'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.22484662416547999
    },
    {
      "name": "total_charges_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between total_charges and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['total_charges_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_support_tickets_monthly'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.205752183284702
    },
    {
      "name": "account_age_days_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between account_age_days and support_tickets_monthly",
      "python_code": "df['account_age_days_times_support_tickets_monthly'] = df['account_age_days'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1967211884940743
    },
    {
      "name": "peak_monthly_usage_gb_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between peak_monthly_usage_gb and support_tickets_monthly",
      "python_code": "df['peak_monthly_usage_gb_times_support_tickets_monthly'] = df['peak_monthly_usage_gb'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1870116330076172
    },
    {
      "name": "support_tickets_monthly_exp",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "exp transformation of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_exp'] = np.exp(df['support_tickets_monthly'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.186140450409535
    },
    {
      "name": "peak_monthly_usage_gb_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between peak_monthly_usage_gb and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['peak_monthly_usage_gb_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'peak_monthly_usage_gb_over_support_tickets_monthly'] = df.loc[mask, 'peak_monthly_usage_gb'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.18320787942894962
    },
    {
      "name": "total_charges_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between total_charges and support_tickets_monthly",
      "python_code": "df['total_charges_times_support_tickets_monthly'] = df['total_charges'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.18143688075501088
    },
    {
      "name": "support_tickets_monthly_sqrt",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "sqrt transformation of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_sqrt'] = np.sqrt(df['support_tickets_monthly'].clip(lower=0))",
      "formula": "sqrt(x) for x >= 0",
      "transformation_type": "sqrt",
      "importance_score": 0.17685754562825365
    },
    {
      "name": "avg_monthly_usage_gb_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between avg_monthly_usage_gb and support_tickets_monthly",
      "python_code": "df['avg_monthly_usage_gb_times_support_tickets_monthly'] = df['avg_monthly_usage_gb'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.17281980036955608
    },
    {
      "name": "monthly_charges_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between monthly_charges and support_tickets_monthly",
      "python_code": "df['monthly_charges_times_support_tickets_monthly'] = df['monthly_charges'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.16822235844308772
    },
    {
      "name": "support_tickets_monthly_power_2",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "Polynomial degree 2 of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_power_2'] = df['support_tickets_monthly'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.1658875504983075
    },
    {
      "name": "account_age_days_times_total_charges",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "total_charges"
      ],
      "description": "Multiply interaction between account_age_days and total_charges",
      "python_code": "df['account_age_days_times_total_charges'] = df['account_age_days'] * df['total_charges']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.16507064477810465
    },
    {
      "name": "avg_monthly_usage_gb_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between avg_monthly_usage_gb and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['avg_monthly_usage_gb_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'avg_monthly_usage_gb_over_support_tickets_monthly'] = df.loc[mask, 'avg_monthly_usage_gb'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.16494240367775276
    },
    {
      "name": "account_age_days_over_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "avg_monthly_usage_gb"
      ],
      "description": "Divide interaction between account_age_days and avg_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['avg_monthly_usage_gb']) > 1e-08\ndf['account_age_days_over_avg_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_avg_monthly_usage_gb'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'avg_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.16181851132468572
    },
    {
      "name": "account_age_days_power_2",
      "type": "mathematical",
      "source_columns": [
        "account_age_days"
      ],
      "description": "Polynomial degree 2 of account_age_days",
      "python_code": "df['account_age_days_power_2'] = df['account_age_days'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.16041508165720383
    },
    {
      "name": "monthly_charges_sin",
      "type": "mathematical",
      "source_columns": [
        "monthly_charges"
      ],
      "description": "sin transformation of monthly_charges",
      "python_code": "df['monthly_charges_sin'] = np.sin(df['monthly_charges'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.16031774075314226
    },
    {
      "name": "account_age_days_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between account_age_days and last_interaction_days",
      "python_code": "df['account_age_days_times_last_interaction_days'] = df['account_age_days'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.15878964992777234
    },
    {
      "name": "support_tickets_monthly_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "support_tickets_monthly",
        "last_interaction_days"
      ],
      "description": "Divide interaction between support_tickets_monthly and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['support_tickets_monthly_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'support_tickets_monthly_over_last_interaction_days'] = df.loc[mask, 'support_tickets_monthly'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.15858762634017984
    },
    {
      "name": "monthly_charges_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between monthly_charges and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['monthly_charges_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_support_tickets_monthly'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.15834519104016817
    },
    {
      "name": "contract_type_frequency",
      "type": "categorical",
      "source_columns": [
        "contract_type"
      ],
      "description": "Frequency encoding of contract_type",
      "python_code": "freq_map = df['contract_type'].value_counts().to_dict()\ndf['contract_type_frequency'] = df['contract_type'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.15746090182555145
    },
    {
      "name": "support_tickets_monthly_sin",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "sin transformation of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_sin'] = np.sin(df['support_tickets_monthly'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.15452160477652488
    },
    {
      "name": "monthly_charges_times_total_charges",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "total_charges"
      ],
      "description": "Multiply interaction between monthly_charges and total_charges",
      "python_code": "df['monthly_charges_times_total_charges'] = df['monthly_charges'] * df['total_charges']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.15235310367723276
    },
    {
      "name": "support_tickets_monthly_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "support_tickets_monthly",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between support_tickets_monthly and last_interaction_days",
      "python_code": "df['support_tickets_monthly_times_last_interaction_days'] = df['support_tickets_monthly'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.15083040779648701
    },
    {
      "name": "monthly_charges_binned",
      "type": "mathematical",
      "source_columns": [
        "monthly_charges"
      ],
      "description": "monthly_charges discretized into 10 bins",
      "python_code": "df['monthly_charges_binned'] = pd.qcut(df['monthly_charges'], 10, labels=False, duplicates='drop')",
      "formula": "Quantile-based binning into 10 bins",
      "transformation_type": "binned",
      "importance_score": 0.149593797394166
    },
    {
      "name": "account_age_days_over_monthly_charges",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "monthly_charges"
      ],
      "description": "Divide interaction between account_age_days and monthly_charges",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['monthly_charges']) > 1e-08\ndf['account_age_days_over_monthly_charges'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_monthly_charges'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'monthly_charges']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.14764629368089874
    },
    {
      "name": "signup_date_month_sin",
      "type": "temporal",
      "source_columns": [
        "signup_date"
      ],
      "description": "month_sin component of signup_date",
      "python_code": "df['signup_date_month_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['signup_date']).dt.month / 12)",
      "formula": "sin(2π * month / 12)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.14286870297195708
    },
    {
      "name": "monthly_charges_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between monthly_charges and peak_monthly_usage_gb",
      "python_code": "df['monthly_charges_times_peak_monthly_usage_gb'] = df['monthly_charges'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1388575744161011
    },
    {
      "name": "payment_method_is_Electronic_check",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Electronic check",
      "python_code": "df['payment_method_is_Electronic_check'] = (df['payment_method'] == 'Electronic check').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.13611126858490039
    },
    {
      "name": "total_charges_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between total_charges and peak_monthly_usage_gb",
      "python_code": "df['total_charges_times_peak_monthly_usage_gb'] = df['total_charges'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.13435558348557614
    },
    {
      "name": "monthly_charges_over_total_charges",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "total_charges"
      ],
      "description": "Divide interaction between monthly_charges and total_charges",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['total_charges']) > 1e-08\ndf['monthly_charges_over_total_charges'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_total_charges'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'total_charges']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.1334850382492708
    },
    {
      "name": "account_age_days_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between account_age_days and peak_monthly_usage_gb",
      "python_code": "df['account_age_days_times_peak_monthly_usage_gb'] = df['account_age_days'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1289482253513245
    },
    {
      "name": "account_age_days_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between account_age_days and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['account_age_days_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_peak_monthly_usage_gb'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.12880377949884333
    },
    {
      "name": "total_charges_sin",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "sin transformation of total_charges",
      "python_code": "df['total_charges_sin'] = np.sin(df['total_charges'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12817600030544468
    },
    {
      "name": "total_charges_power_2",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "Polynomial degree 2 of total_charges",
      "python_code": "df['total_charges_power_2'] = df['total_charges'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.12613472610779558
    },
    {
      "name": "total_charges_times_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Multiply interaction between total_charges and avg_monthly_usage_gb",
      "python_code": "df['total_charges_times_avg_monthly_usage_gb'] = df['total_charges'] * df['avg_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12606498171646896
    },
    {
      "name": "total_charges_log",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "log transformation of total_charges",
      "python_code": "df['total_charges_log'] = np.log(df['total_charges'].clip(lower=1e-8))",
      "formula": "log(x) for x > 0",
      "transformation_type": "log",
      "importance_score": 0.1255609573922914
    },
    {
      "name": "total_charges_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between total_charges and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['total_charges_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_peak_monthly_usage_gb'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.12514552896179254
    },
    {
      "name": "account_age_days_sin",
      "type": "mathematical",
      "source_columns": [
        "account_age_days"
      ],
      "description": "sin transformation of account_age_days",
      "python_code": "df['account_age_days_sin'] = np.sin(df['account_age_days'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12476672053263964
    },
    {
      "name": "total_charges_sqrt",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "sqrt transformation of total_charges",
      "python_code": "df['total_charges_sqrt'] = np.sqrt(df['total_charges'].clip(lower=0))",
      "formula": "sqrt(x) for x >= 0",
      "transformation_type": "sqrt",
      "importance_score": 0.12464165043608083
    },
    {
      "name": "total_charges_power_3",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "Polynomial degree 3 of total_charges",
      "python_code": "df['total_charges_power_3'] = df['total_charges'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.12431147606207305
    },
    {
      "name": "monthly_charges_times_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Multiply interaction between monthly_charges and avg_monthly_usage_gb",
      "python_code": "df['monthly_charges_times_avg_monthly_usage_gb'] = df['monthly_charges'] * df['avg_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12316495102897511
    },
    {
      "name": "avg_monthly_usage_gb_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between avg_monthly_usage_gb and peak_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_times_peak_monthly_usage_gb'] = df['avg_monthly_usage_gb'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12158596121899637
    },
    {
      "name": "account_age_days_cos",
      "type": "mathematical",
      "source_columns": [
        "account_age_days"
      ],
      "description": "cos transformation of account_age_days",
      "python_code": "df['account_age_days_cos'] = np.cos(df['account_age_days'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.11750013981538263
    },
    {
      "name": "contract_type_is_Two_year",
      "type": "categorical",
      "source_columns": [
        "contract_type"
      ],
      "description": "Binary indicator for contract_type==Two year",
      "python_code": "df['contract_type_is_Two_year'] = (df['contract_type'] == 'Two year').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.11625343317492427
    },
    {
      "name": "account_age_days_times_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "avg_monthly_usage_gb"
      ],
      "description": "Multiply interaction between account_age_days and avg_monthly_usage_gb",
      "python_code": "df['account_age_days_times_avg_monthly_usage_gb'] = df['account_age_days'] * df['avg_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.11623166163716117
    },
    {
      "name": "monthly_charges_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between monthly_charges and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['monthly_charges_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_peak_monthly_usage_gb'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.11611187065733783
    },
    {
      "name": "avg_monthly_usage_gb_cos",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "cos transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_cos'] = np.cos(df['avg_monthly_usage_gb'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.11371571089056151
    },
    {
      "name": "peak_monthly_usage_gb_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "last_interaction_days"
      ],
      "description": "Divide interaction between peak_monthly_usage_gb and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['peak_monthly_usage_gb_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'peak_monthly_usage_gb_over_last_interaction_days'] = df.loc[mask, 'peak_monthly_usage_gb'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.1127900062796403
    },
    {
      "name": "avg_monthly_usage_gb_sin",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "sin transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_sin'] = np.sin(df['avg_monthly_usage_gb'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.10897601430839085
    },
    {
      "name": "account_age_days_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "last_interaction_days"
      ],
      "description": "Divide interaction between account_age_days and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['account_age_days_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_last_interaction_days'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.1084832532215313
    },
    {
      "name": "avg_monthly_usage_gb_exp",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "exp transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_exp'] = np.exp(df['avg_monthly_usage_gb'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.10663249060156212
    },
    {
      "name": "avg_monthly_usage_gb_power_3",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "Polynomial degree 3 of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_power_3'] = df['avg_monthly_usage_gb'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.10646381841057276
    },
    {
      "name": "last_interaction_days_power_2",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "Polynomial degree 2 of last_interaction_days",
      "python_code": "df['last_interaction_days_power_2'] = df['last_interaction_days'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.10477985385785249
    },
    {
      "name": "peak_monthly_usage_gb_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between peak_monthly_usage_gb and last_interaction_days",
      "python_code": "df['peak_monthly_usage_gb_times_last_interaction_days'] = df['peak_monthly_usage_gb'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.10090615946480293
    },
    {
      "name": "last_interaction_days_binned",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "last_interaction_days discretized into 10 bins",
      "python_code": "df['last_interaction_days_binned'] = pd.qcut(df['last_interaction_days'], 10, labels=False, duplicates='drop')",
      "formula": "Quantile-based binning into 10 bins",
      "transformation_type": "binned",
      "importance_score": 0.0997180920114522
    },
    {
      "name": "avg_monthly_usage_gb_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "reciprocal transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_reciprocal'] = 1.0 / (df['avg_monthly_usage_gb'] + 1e-08)",
      "formula": "1 / (x + ε)",
      "transformation_type": "reciprocal",
      "importance_score": 0.09920320307592852
    },
    {
      "name": "signup_date_is_weekend",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "is_weekend component of signup_date",
      "python_code": "df['signup_date_is_weekend'] = pd.to_datetime(df['signup_date']).dt.dayofweek.isin([5, 6]).astype(int)",
      "formula": "1 if Saturday/Sunday, 0 otherwise",
      "transformation_type": "temporal_component",
      "importance_score": 0.09704333212135421
    },
    {
      "name": "total_charges_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between total_charges and last_interaction_days",
      "python_code": "df['total_charges_times_last_interaction_days'] = df['total_charges'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.09599033694314897
    },
    {
      "name": "signup_date_dayofweek",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "dayofweek component of signup_date",
      "python_code": "df['signup_date_dayofweek'] = pd.to_datetime(df['signup_date']).dt.dayofweek",
      "formula": "Extract day of week (0=Monday)",
      "transformation_type": "temporal_component",
      "importance_score": 0.09590918000208383
    },
    {
      "name": "peak_monthly_usage_gb_exp",
      "type": "mathematical",
      "source_columns": [
        "peak_monthly_usage_gb"
      ],
      "description": "exp transformation of peak_monthly_usage_gb",
      "python_code": "df['peak_monthly_usage_gb_exp'] = np.exp(df['peak_monthly_usage_gb'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.09347681364592544
    },
    {
      "name": "payment_method_frequency",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Frequency encoding of payment_method",
      "python_code": "freq_map = df['payment_method'].value_counts().to_dict()\ndf['payment_method_frequency'] = df['payment_method'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.09222189017802732
    },
    {
      "name": "signup_date_quarter",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "quarter component of signup_date",
      "python_code": "df['signup_date_quarter'] = pd.to_datetime(df['signup_date']).dt.quarter",
      "formula": "Extract quarter (1-4)",
      "transformation_type": "temporal_component",
      "importance_score": 0.09050423225529923
    },
    {
      "name": "payment_method_is_Bank_transfer",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Bank transfer",
      "python_code": "df['payment_method_is_Bank_transfer'] = (df['payment_method'] == 'Bank transfer').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.09008226055863539
    },
    {
      "name": "last_interaction_days_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "reciprocal transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_reciprocal'] = 1.0 / (df['last_interaction_days'] + 1e-08)",
      "formula": "1 / (x + ε)",
      "transformation_type": "reciprocal",
      "importance_score": 0.08963820314142168
    },
    {
      "name": "last_interaction_days_sin",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "sin transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_sin'] = np.sin(df['last_interaction_days'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.0889517984577425
    },
    {
      "name": "monthly_charges_cos",
      "type": "mathematical",
      "source_columns": [
        "monthly_charges"
      ],
      "description": "cos transformation of monthly_charges",
      "python_code": "df['monthly_charges_cos'] = np.cos(df['monthly_charges'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.08626856694125065
    },
    {
      "name": "last_interaction_days_power_3",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "Polynomial degree 3 of last_interaction_days",
      "python_code": "df['last_interaction_days_power_3'] = df['last_interaction_days'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.08448961009380351
    },
    {
      "name": "payment_method_is_Mailed_check",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Mailed check",
      "python_code": "df['payment_method_is_Mailed_check'] = (df['payment_method'] == 'Mailed check').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.08377020613084495
    },
    {
      "name": "signup_date_day_sin",
      "type": "temporal",
      "source_columns": [
        "signup_date"
      ],
      "description": "day_sin component of signup_date",
      "python_code": "df['signup_date_day_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['signup_date']).dt.day / 31)",
      "formula": "sin(2π * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.08264486372925527
    },
    {
      "name": "payment_method_is_Credit_card",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Credit card",
      "python_code": "df['payment_method_is_Credit_card'] = (df['payment_method'] == 'Credit card').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.08228960703330027
    },
    {
      "name": "account_age_days_over_total_charges",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "total_charges"
      ],
      "description": "Divide interaction between account_age_days and total_charges",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['total_charges']) > 1e-08\ndf['account_age_days_over_total_charges'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_total_charges'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'total_charges']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.08189607653830316
    },
    {
      "name": "monthly_charges_over_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Divide interaction between monthly_charges and avg_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['avg_monthly_usage_gb']) > 1e-08\ndf['monthly_charges_over_avg_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_avg_monthly_usage_gb'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'avg_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.07519218215836342
    },
    {
      "name": "total_charges_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "last_interaction_days"
      ],
      "description": "Divide interaction between total_charges and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['total_charges_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_last_interaction_days'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.07399886159195297
    },
    {
      "name": "last_interaction_days_exp",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "exp transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_exp'] = np.exp(df['last_interaction_days'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.07358828238305151
    },
    {
      "name": "contract_type_is_One_year",
      "type": "categorical",
      "source_columns": [
        "contract_type"
      ],
      "description": "Binary indicator for contract_type==One year",
      "python_code": "df['contract_type_is_One_year'] = (df['contract_type'] == 'One year').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.0722779077112223
    },
    {
      "name": "last_interaction_days_cos",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "cos transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_cos'] = np.cos(df['last_interaction_days'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06896863581770549
    },
    {
      "name": "signup_date_day",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "day component of signup_date",
      "python_code": "df['signup_date_day'] = pd.to_datetime(df['signup_date']).dt.day",
      "formula": "Extract day of month (1-31)",
      "transformation_type": "temporal_component",
      "importance_score": 0.06625893945876392
    },
    {
      "name": "peak_monthly_usage_gb_sin",
      "type": "mathematical",
      "source_columns": [
        "peak_monthly_usage_gb"
      ],
      "description": "sin transformation of peak_monthly_usage_gb",
      "python_code": "df['peak_monthly_usage_gb_sin'] = np.sin(df['peak_monthly_usage_gb'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06546961400040725
    },
    {
      "name": "total_charges_over_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Divide interaction between total_charges and avg_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['avg_monthly_usage_gb']) > 1e-08\ndf['total_charges_over_avg_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_avg_monthly_usage_gb'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'avg_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.06516146329022128
    },
    {
      "name": "avg_monthly_usage_gb_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between avg_monthly_usage_gb and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['avg_monthly_usage_gb_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'avg_monthly_usage_gb_over_peak_monthly_usage_gb'] = df.loc[mask, 'avg_monthly_usage_gb'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.06515308111067465
    },
    {
      "name": "total_charges_cos",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "cos transformation of total_charges",
      "python_code": "df['total_charges_cos'] = np.cos(df['total_charges'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06510324054356792
    },
    {
      "name": "peak_monthly_usage_gb_cos",
      "type": "mathematical",
      "source_columns": [
        "peak_monthly_usage_gb"
      ],
      "description": "cos transformation of peak_monthly_usage_gb",
      "python_code": "df['peak_monthly_usage_gb_cos'] = np.cos(df['peak_monthly_usage_gb'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06494171485661504
    },
    {
      "name": "signup_date_day_cos",
      "type": "temporal",
      "source_columns": [
        "signup_date"
      ],
      "description": "day_cos component of signup_date",
      "python_code": "df['signup_date_day_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['signup_date']).dt.day / 31)",
      "formula": "cos(2π * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.06462954504689192
    },
    {
      "name": "monthly_charges_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "last_interaction_days"
      ],
      "description": "Divide interaction between monthly_charges and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['monthly_charges_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_last_interaction_days'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.06447229068692434
    },
    {
      "name": "avg_monthly_usage_gb_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between avg_monthly_usage_gb and last_interaction_days",
      "python_code": "df['avg_monthly_usage_gb_times_last_interaction_days'] = df['avg_monthly_usage_gb'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.06441090019435637
    },
    {
      "name": "monthly_charges_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between monthly_charges and last_interaction_days",
      "python_code": "df['monthly_charges_times_last_interaction_days'] = df['monthly_charges'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.06397504444938172
    }
  ],
  "instructions": {
    "description": "This recipe contains the code to recreate the selected features",
    "usage": "Apply the python_code for each feature in the order listed",
    "requirements": [
      "pandas",
      "numpy",
      "scikit-learn"
    ]
  }
}