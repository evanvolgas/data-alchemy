{
  "metadata": {
    "version": "1.0",
    "created_by": "DataAlchemy",
    "total_features": 86,
    "original_features": 14,
    "engineered_features": 124
  },
  "features": [
    {
      "name": "account_age_days_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between account_age_days and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['account_age_days_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_support_tickets_monthly'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.22928591841719512
    },
    {
      "name": "total_charges_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between total_charges and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['total_charges_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_support_tickets_monthly'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.2046065720163651
    },
    {
      "name": "account_age_days_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between account_age_days and support_tickets_monthly",
      "python_code": "df['account_age_days_times_support_tickets_monthly'] = df['account_age_days'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1967711711516027
    },
    {
      "name": "peak_monthly_usage_gb_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between peak_monthly_usage_gb and support_tickets_monthly",
      "python_code": "df['peak_monthly_usage_gb_times_support_tickets_monthly'] = df['peak_monthly_usage_gb'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1869222160637431
    },
    {
      "name": "support_tickets_monthly_exp",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "exp transformation of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_exp'] = np.exp(df['support_tickets_monthly'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.1859993594535894
    },
    {
      "name": "peak_monthly_usage_gb_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between peak_monthly_usage_gb and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['peak_monthly_usage_gb_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'peak_monthly_usage_gb_over_support_tickets_monthly'] = df.loc[mask, 'peak_monthly_usage_gb'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.18273556023897308
    },
    {
      "name": "total_charges_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between total_charges and support_tickets_monthly",
      "python_code": "df['total_charges_times_support_tickets_monthly'] = df['total_charges'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.18136196064650534
    },
    {
      "name": "support_tickets_monthly_sqrt",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "sqrt transformation of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_sqrt'] = np.sqrt(df['support_tickets_monthly'].clip(lower=0))",
      "formula": "sqrt(x) for x >= 0",
      "transformation_type": "sqrt",
      "importance_score": 0.17677230739688707
    },
    {
      "name": "avg_monthly_usage_gb_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between avg_monthly_usage_gb and support_tickets_monthly",
      "python_code": "df['avg_monthly_usage_gb_times_support_tickets_monthly'] = df['avg_monthly_usage_gb'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1722557516334473
    },
    {
      "name": "monthly_charges_times_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "support_tickets_monthly"
      ],
      "description": "Multiply interaction between monthly_charges and support_tickets_monthly",
      "python_code": "df['monthly_charges_times_support_tickets_monthly'] = df['monthly_charges'] * df['support_tickets_monthly']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.16817276168188314
    },
    {
      "name": "support_tickets_monthly_power_2",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "Polynomial degree 2 of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_power_2'] = df['support_tickets_monthly'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.16576007498339548
    },
    {
      "name": "avg_monthly_usage_gb_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between avg_monthly_usage_gb and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['avg_monthly_usage_gb_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'avg_monthly_usage_gb_over_support_tickets_monthly'] = df.loc[mask, 'avg_monthly_usage_gb'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.16487620763589264
    },
    {
      "name": "account_age_days_times_total_charges",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "total_charges"
      ],
      "description": "Multiply interaction between account_age_days and total_charges",
      "python_code": "df['account_age_days_times_total_charges'] = df['account_age_days'] * df['total_charges']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.16477937618145103
    },
    {
      "name": "account_age_days_over_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "avg_monthly_usage_gb"
      ],
      "description": "Divide interaction between account_age_days and avg_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['avg_monthly_usage_gb']) > 1e-08\ndf['account_age_days_over_avg_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_avg_monthly_usage_gb'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'avg_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.16188246228585215
    },
    {
      "name": "monthly_charges_sin",
      "type": "mathematical",
      "source_columns": [
        "monthly_charges"
      ],
      "description": "sin transformation of monthly_charges",
      "python_code": "df['monthly_charges_sin'] = np.sin(df['monthly_charges'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.15997394840944962
    },
    {
      "name": "account_age_days_power_2",
      "type": "mathematical",
      "source_columns": [
        "account_age_days"
      ],
      "description": "Polynomial degree 2 of account_age_days",
      "python_code": "df['account_age_days_power_2'] = df['account_age_days'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.159272266514816
    },
    {
      "name": "support_tickets_monthly_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "support_tickets_monthly",
        "last_interaction_days"
      ],
      "description": "Divide interaction between support_tickets_monthly and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['support_tickets_monthly_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'support_tickets_monthly_over_last_interaction_days'] = df.loc[mask, 'support_tickets_monthly'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.15891922836374023
    },
    {
      "name": "contract_type_frequency",
      "type": "categorical",
      "source_columns": [
        "contract_type"
      ],
      "description": "Frequency encoding of contract_type",
      "python_code": "freq_map = df['contract_type'].value_counts().to_dict()\ndf['contract_type_frequency'] = df['contract_type'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.15844160998408807
    },
    {
      "name": "account_age_days_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between account_age_days and last_interaction_days",
      "python_code": "df['account_age_days_times_last_interaction_days'] = df['account_age_days'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.15825623602500852
    },
    {
      "name": "monthly_charges_over_support_tickets_monthly",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "support_tickets_monthly"
      ],
      "description": "Divide interaction between monthly_charges and support_tickets_monthly",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['support_tickets_monthly']) > 1e-08\ndf['monthly_charges_over_support_tickets_monthly'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_support_tickets_monthly'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'support_tickets_monthly']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.15801702641117646
    },
    {
      "name": "support_tickets_monthly_sin",
      "type": "mathematical",
      "source_columns": [
        "support_tickets_monthly"
      ],
      "description": "sin transformation of support_tickets_monthly",
      "python_code": "df['support_tickets_monthly_sin'] = np.sin(df['support_tickets_monthly'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.15444878224296552
    },
    {
      "name": "monthly_charges_times_total_charges",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "total_charges"
      ],
      "description": "Multiply interaction between monthly_charges and total_charges",
      "python_code": "df['monthly_charges_times_total_charges'] = df['monthly_charges'] * df['total_charges']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.15274624665938627
    },
    {
      "name": "support_tickets_monthly_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "support_tickets_monthly",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between support_tickets_monthly and last_interaction_days",
      "python_code": "df['support_tickets_monthly_times_last_interaction_days'] = df['support_tickets_monthly'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1511788736447932
    },
    {
      "name": "monthly_charges_binned",
      "type": "mathematical",
      "source_columns": [
        "monthly_charges"
      ],
      "description": "monthly_charges discretized into 10 bins",
      "python_code": "df['monthly_charges_binned'] = pd.qcut(df['monthly_charges'], 10, labels=False, duplicates='drop')",
      "formula": "Quantile-based binning into 10 bins",
      "transformation_type": "binned",
      "importance_score": 0.14955777381178634
    },
    {
      "name": "account_age_days_over_monthly_charges",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "monthly_charges"
      ],
      "description": "Divide interaction between account_age_days and monthly_charges",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['monthly_charges']) > 1e-08\ndf['account_age_days_over_monthly_charges'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_monthly_charges'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'monthly_charges']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.1483323183297312
    },
    {
      "name": "monthly_charges_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between monthly_charges and peak_monthly_usage_gb",
      "python_code": "df['monthly_charges_times_peak_monthly_usage_gb'] = df['monthly_charges'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1384142251530288
    },
    {
      "name": "payment_method_is_Electronic_check",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Electronic check",
      "python_code": "df['payment_method_is_Electronic_check'] = (df['payment_method'] == 'Electronic check').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.1349567615710708
    },
    {
      "name": "total_charges_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between total_charges and peak_monthly_usage_gb",
      "python_code": "df['total_charges_times_peak_monthly_usage_gb'] = df['total_charges'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.13387882009484883
    },
    {
      "name": "monthly_charges_over_total_charges",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "total_charges"
      ],
      "description": "Divide interaction between monthly_charges and total_charges",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['total_charges']) > 1e-08\ndf['monthly_charges_over_total_charges'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_total_charges'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'total_charges']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.13168311069136912
    },
    {
      "name": "account_age_days_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between account_age_days and peak_monthly_usage_gb",
      "python_code": "df['account_age_days_times_peak_monthly_usage_gb'] = df['account_age_days'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12922758972112292
    },
    {
      "name": "account_age_days_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between account_age_days and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['account_age_days_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_peak_monthly_usage_gb'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.1284699037356742
    },
    {
      "name": "total_charges_sin",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "sin transformation of total_charges",
      "python_code": "df['total_charges_sin'] = np.sin(df['total_charges'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.128469057074443
    },
    {
      "name": "total_charges_times_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Multiply interaction between total_charges and avg_monthly_usage_gb",
      "python_code": "df['total_charges_times_avg_monthly_usage_gb'] = df['total_charges'] * df['avg_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12581636570611895
    },
    {
      "name": "total_charges_log",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "log transformation of total_charges",
      "python_code": "df['total_charges_log'] = np.log(df['total_charges'].clip(lower=1e-8))",
      "formula": "log(x) for x > 0",
      "transformation_type": "log",
      "importance_score": 0.12559773976859065
    },
    {
      "name": "total_charges_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between total_charges and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['total_charges_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_peak_monthly_usage_gb'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.12559362507629873
    },
    {
      "name": "account_age_days_sin",
      "type": "mathematical",
      "source_columns": [
        "account_age_days"
      ],
      "description": "sin transformation of account_age_days",
      "python_code": "df['account_age_days_sin'] = np.sin(df['account_age_days'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12505107247898292
    },
    {
      "name": "total_charges_power_2",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "Polynomial degree 2 of total_charges",
      "python_code": "df['total_charges_power_2'] = df['total_charges'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.12493525441940467
    },
    {
      "name": "total_charges_power_3",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "Polynomial degree 3 of total_charges",
      "python_code": "df['total_charges_power_3'] = df['total_charges'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.12441742777071534
    },
    {
      "name": "total_charges_sqrt",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "sqrt transformation of total_charges",
      "python_code": "df['total_charges_sqrt'] = np.sqrt(df['total_charges'].clip(lower=0))",
      "formula": "sqrt(x) for x >= 0",
      "transformation_type": "sqrt",
      "importance_score": 0.12436467302642691
    },
    {
      "name": "monthly_charges_times_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Multiply interaction between monthly_charges and avg_monthly_usage_gb",
      "python_code": "df['monthly_charges_times_avg_monthly_usage_gb'] = df['monthly_charges'] * df['avg_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12310051121718595
    },
    {
      "name": "avg_monthly_usage_gb_times_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "peak_monthly_usage_gb"
      ],
      "description": "Multiply interaction between avg_monthly_usage_gb and peak_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_times_peak_monthly_usage_gb'] = df['avg_monthly_usage_gb'] * df['peak_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.12099699552093496
    },
    {
      "name": "account_age_days_cos",
      "type": "mathematical",
      "source_columns": [
        "account_age_days"
      ],
      "description": "cos transformation of account_age_days",
      "python_code": "df['account_age_days_cos'] = np.cos(df['account_age_days'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.1170195706430078
    },
    {
      "name": "account_age_days_times_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "avg_monthly_usage_gb"
      ],
      "description": "Multiply interaction between account_age_days and avg_monthly_usage_gb",
      "python_code": "df['account_age_days_times_avg_monthly_usage_gb'] = df['account_age_days'] * df['avg_monthly_usage_gb']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.11626909575495517
    },
    {
      "name": "contract_type_is_Two_year",
      "type": "categorical",
      "source_columns": [
        "contract_type"
      ],
      "description": "Binary indicator for contract_type==Two year",
      "python_code": "df['contract_type_is_Two_year'] = (df['contract_type'] == 'Two year').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.11612817848330491
    },
    {
      "name": "monthly_charges_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between monthly_charges and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['monthly_charges_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_peak_monthly_usage_gb'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.11571777504564382
    },
    {
      "name": "avg_monthly_usage_gb_cos",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "cos transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_cos'] = np.cos(df['avg_monthly_usage_gb'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.11381545557948762
    },
    {
      "name": "peak_monthly_usage_gb_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "last_interaction_days"
      ],
      "description": "Divide interaction between peak_monthly_usage_gb and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['peak_monthly_usage_gb_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'peak_monthly_usage_gb_over_last_interaction_days'] = df.loc[mask, 'peak_monthly_usage_gb'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.11316640359142728
    },
    {
      "name": "signup_date_month_sin",
      "type": "temporal",
      "source_columns": [
        "signup_date"
      ],
      "description": "month_sin component of signup_date",
      "python_code": "df['signup_date_month_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['signup_date']).dt.month / 12)",
      "formula": "sin(2π * month / 12)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.11233278389194618
    },
    {
      "name": "signup_date_day",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "day component of signup_date",
      "python_code": "df['signup_date_day'] = pd.to_datetime(df['signup_date']).dt.day",
      "formula": "Extract day of month (1-31)",
      "transformation_type": "temporal_component",
      "importance_score": 0.11199019001210524
    },
    {
      "name": "signup_date_day_cos",
      "type": "temporal",
      "source_columns": [
        "signup_date"
      ],
      "description": "day_cos component of signup_date",
      "python_code": "df['signup_date_day_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['signup_date']).dt.day / 31)",
      "formula": "cos(2π * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.11185833472772168
    },
    {
      "name": "avg_monthly_usage_gb_sin",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "sin transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_sin'] = np.sin(df['avg_monthly_usage_gb'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.10959077162948451
    },
    {
      "name": "account_age_days_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "last_interaction_days"
      ],
      "description": "Divide interaction between account_age_days and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['account_age_days_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_last_interaction_days'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.10848380438852075
    },
    {
      "name": "avg_monthly_usage_gb_power_3",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "Polynomial degree 3 of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_power_3'] = df['avg_monthly_usage_gb'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.1063534905127571
    },
    {
      "name": "avg_monthly_usage_gb_exp",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "exp transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_exp'] = np.exp(df['avg_monthly_usage_gb'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.10619807085109706
    },
    {
      "name": "last_interaction_days_power_2",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "Polynomial degree 2 of last_interaction_days",
      "python_code": "df['last_interaction_days_power_2'] = df['last_interaction_days'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.10474035558864944
    },
    {
      "name": "peak_monthly_usage_gb_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "peak_monthly_usage_gb",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between peak_monthly_usage_gb and last_interaction_days",
      "python_code": "df['peak_monthly_usage_gb_times_last_interaction_days'] = df['peak_monthly_usage_gb'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.10067127033279781
    },
    {
      "name": "last_interaction_days_log",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "log transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_log'] = np.log(df['last_interaction_days'].clip(lower=1e-8))",
      "formula": "log(x) for x > 0",
      "transformation_type": "log",
      "importance_score": 0.09922724882920451
    },
    {
      "name": "avg_monthly_usage_gb_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "avg_monthly_usage_gb"
      ],
      "description": "reciprocal transformation of avg_monthly_usage_gb",
      "python_code": "df['avg_monthly_usage_gb_reciprocal'] = 1.0 / (df['avg_monthly_usage_gb'] + 1e-08)",
      "formula": "1 / (x + ε)",
      "transformation_type": "reciprocal",
      "importance_score": 0.09922476041404221
    },
    {
      "name": "total_charges_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between total_charges and last_interaction_days",
      "python_code": "df['total_charges_times_last_interaction_days'] = df['total_charges'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.09581365380590565
    },
    {
      "name": "peak_monthly_usage_gb_exp",
      "type": "mathematical",
      "source_columns": [
        "peak_monthly_usage_gb"
      ],
      "description": "exp transformation of peak_monthly_usage_gb",
      "python_code": "df['peak_monthly_usage_gb_exp'] = np.exp(df['peak_monthly_usage_gb'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.09327077286695463
    },
    {
      "name": "payment_method_frequency",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Frequency encoding of payment_method",
      "python_code": "freq_map = df['payment_method'].value_counts().to_dict()\ndf['payment_method_frequency'] = df['payment_method'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.09288842903201844
    },
    {
      "name": "payment_method_is_Bank_transfer",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Bank transfer",
      "python_code": "df['payment_method_is_Bank_transfer'] = (df['payment_method'] == 'Bank transfer').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.08992786530469606
    },
    {
      "name": "last_interaction_days_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "reciprocal transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_reciprocal'] = 1.0 / (df['last_interaction_days'] + 1e-08)",
      "formula": "1 / (x + ε)",
      "transformation_type": "reciprocal",
      "importance_score": 0.08982976426206758
    },
    {
      "name": "last_interaction_days_sin",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "sin transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_sin'] = np.sin(df['last_interaction_days'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.08930168171609079
    },
    {
      "name": "monthly_charges_cos",
      "type": "mathematical",
      "source_columns": [
        "monthly_charges"
      ],
      "description": "cos transformation of monthly_charges",
      "python_code": "df['monthly_charges_cos'] = np.cos(df['monthly_charges'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.08607871948477144
    },
    {
      "name": "signup_date_quarter",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "quarter component of signup_date",
      "python_code": "df['signup_date_quarter'] = pd.to_datetime(df['signup_date']).dt.quarter",
      "formula": "Extract quarter (1-4)",
      "transformation_type": "temporal_component",
      "importance_score": 0.08565720290929202
    },
    {
      "name": "signup_date_dayofweek",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "dayofweek component of signup_date",
      "python_code": "df['signup_date_dayofweek'] = pd.to_datetime(df['signup_date']).dt.dayofweek",
      "formula": "Extract day of week (0=Monday)",
      "transformation_type": "temporal_component",
      "importance_score": 0.0845096884670191
    },
    {
      "name": "last_interaction_days_power_3",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "Polynomial degree 3 of last_interaction_days",
      "python_code": "df['last_interaction_days_power_3'] = df['last_interaction_days'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.08438686631519218
    },
    {
      "name": "payment_method_is_Mailed_check",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Mailed check",
      "python_code": "df['payment_method_is_Mailed_check'] = (df['payment_method'] == 'Mailed check').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.08374988844534702
    },
    {
      "name": "payment_method_is_Credit_card",
      "type": "categorical",
      "source_columns": [
        "payment_method"
      ],
      "description": "Binary indicator for payment_method==Credit card",
      "python_code": "df['payment_method_is_Credit_card'] = (df['payment_method'] == 'Credit card').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.0820743066085563
    },
    {
      "name": "account_age_days_over_total_charges",
      "type": "interaction",
      "source_columns": [
        "account_age_days",
        "total_charges"
      ],
      "description": "Divide interaction between account_age_days and total_charges",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['total_charges']) > 1e-08\ndf['account_age_days_over_total_charges'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'account_age_days_over_total_charges'] = df.loc[mask, 'account_age_days'] / df.loc[mask, 'total_charges']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.08192441073790317
    },
    {
      "name": "signup_date_is_weekend",
      "type": "engineered",
      "source_columns": [
        "signup_date"
      ],
      "description": "is_weekend component of signup_date",
      "python_code": "df['signup_date_is_weekend'] = pd.to_datetime(df['signup_date']).dt.dayofweek.isin([5, 6]).astype(int)",
      "formula": "1 if Saturday/Sunday, 0 otherwise",
      "transformation_type": "temporal_component",
      "importance_score": 0.07819475983481453
    },
    {
      "name": "monthly_charges_over_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Divide interaction between monthly_charges and avg_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['avg_monthly_usage_gb']) > 1e-08\ndf['monthly_charges_over_avg_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_avg_monthly_usage_gb'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'avg_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.07579701993056516
    },
    {
      "name": "total_charges_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "last_interaction_days"
      ],
      "description": "Divide interaction between total_charges and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['total_charges_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_last_interaction_days'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.07417155105349314
    },
    {
      "name": "last_interaction_days_exp",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "exp transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_exp'] = np.exp(df['last_interaction_days'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.07351677615232653
    },
    {
      "name": "contract_type_is_One_year",
      "type": "categorical",
      "source_columns": [
        "contract_type"
      ],
      "description": "Binary indicator for contract_type==One year",
      "python_code": "df['contract_type_is_One_year'] = (df['contract_type'] == 'One year').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.07265671184862231
    },
    {
      "name": "last_interaction_days_cos",
      "type": "mathematical",
      "source_columns": [
        "last_interaction_days"
      ],
      "description": "cos transformation of last_interaction_days",
      "python_code": "df['last_interaction_days_cos'] = np.cos(df['last_interaction_days'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06947201195427793
    },
    {
      "name": "signup_date_day_sin",
      "type": "temporal",
      "source_columns": [
        "signup_date"
      ],
      "description": "day_sin component of signup_date",
      "python_code": "df['signup_date_day_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['signup_date']).dt.day / 31)",
      "formula": "sin(2π * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.06790186514049823
    },
    {
      "name": "peak_monthly_usage_gb_sin",
      "type": "mathematical",
      "source_columns": [
        "peak_monthly_usage_gb"
      ],
      "description": "sin transformation of peak_monthly_usage_gb",
      "python_code": "df['peak_monthly_usage_gb_sin'] = np.sin(df['peak_monthly_usage_gb'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06560192288580005
    },
    {
      "name": "peak_monthly_usage_gb_cos",
      "type": "mathematical",
      "source_columns": [
        "peak_monthly_usage_gb"
      ],
      "description": "cos transformation of peak_monthly_usage_gb",
      "python_code": "df['peak_monthly_usage_gb_cos'] = np.cos(df['peak_monthly_usage_gb'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06539331392598689
    },
    {
      "name": "total_charges_cos",
      "type": "mathematical",
      "source_columns": [
        "total_charges"
      ],
      "description": "cos transformation of total_charges",
      "python_code": "df['total_charges_cos'] = np.cos(df['total_charges'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.0653914890310098
    },
    {
      "name": "avg_monthly_usage_gb_over_peak_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "peak_monthly_usage_gb"
      ],
      "description": "Divide interaction between avg_monthly_usage_gb and peak_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['peak_monthly_usage_gb']) > 1e-08\ndf['avg_monthly_usage_gb_over_peak_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'avg_monthly_usage_gb_over_peak_monthly_usage_gb'] = df.loc[mask, 'avg_monthly_usage_gb'] / df.loc[mask, 'peak_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.06517021722632867
    },
    {
      "name": "total_charges_over_avg_monthly_usage_gb",
      "type": "interaction",
      "source_columns": [
        "total_charges",
        "avg_monthly_usage_gb"
      ],
      "description": "Divide interaction between total_charges and avg_monthly_usage_gb",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['avg_monthly_usage_gb']) > 1e-08\ndf['total_charges_over_avg_monthly_usage_gb'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'total_charges_over_avg_monthly_usage_gb'] = df.loc[mask, 'total_charges'] / df.loc[mask, 'avg_monthly_usage_gb']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.0644672782202198
    },
    {
      "name": "monthly_charges_over_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "last_interaction_days"
      ],
      "description": "Divide interaction between monthly_charges and last_interaction_days",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['last_interaction_days']) > 1e-08\ndf['monthly_charges_over_last_interaction_days'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'monthly_charges_over_last_interaction_days'] = df.loc[mask, 'monthly_charges'] / df.loc[mask, 'last_interaction_days']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.06405497712328441
    },
    {
      "name": "avg_monthly_usage_gb_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "avg_monthly_usage_gb",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between avg_monthly_usage_gb and last_interaction_days",
      "python_code": "df['avg_monthly_usage_gb_times_last_interaction_days'] = df['avg_monthly_usage_gb'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.06405254310251969
    },
    {
      "name": "monthly_charges_times_last_interaction_days",
      "type": "interaction",
      "source_columns": [
        "monthly_charges",
        "last_interaction_days"
      ],
      "description": "Multiply interaction between monthly_charges and last_interaction_days",
      "python_code": "df['monthly_charges_times_last_interaction_days'] = df['monthly_charges'] * df['last_interaction_days']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.0639760074793264
    }
  ],
  "instructions": {
    "description": "This recipe contains the code to recreate the selected features",
    "usage": "Apply the python_code for each feature in the order listed",
    "requirements": [
      "pandas",
      "numpy",
      "scikit-learn"
    ]
  }
}