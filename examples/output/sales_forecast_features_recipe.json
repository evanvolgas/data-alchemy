{
  "metadata": {
    "version": "1.0",
    "created_by": "DataAlchemy",
    "total_features": 49,
    "original_features": 10,
    "engineered_features": 85
  },
  "features": [
    {
      "name": "price_over_competitor_price_ratio",
      "type": "interaction",
      "source_columns": [
        "price",
        "competitor_price_ratio"
      ],
      "description": "Divide interaction between price and competitor_price_ratio",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['competitor_price_ratio']) > 1e-08\ndf['price_over_competitor_price_ratio'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'price_over_competitor_price_ratio'] = df.loc[mask, 'price'] / df.loc[mask, 'competitor_price_ratio']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.5637223775824539
    },
    {
      "name": "price_over_temperature",
      "type": "interaction",
      "source_columns": [
        "price",
        "temperature"
      ],
      "description": "Divide interaction between price and temperature",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['temperature']) > 1e-08\ndf['price_over_temperature'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'price_over_temperature'] = df.loc[mask, 'price'] / df.loc[mask, 'temperature']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.3265889146763947
    },
    {
      "name": "product_category_is_Electronics",
      "type": "categorical",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Electronics",
      "python_code": "df['product_category_is_Electronics'] = (df['product_category'] == 'Electronics').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.2845359850173795
    },
    {
      "name": "product_category_frequency",
      "type": "categorical",
      "source_columns": [
        "product_category"
      ],
      "description": "Frequency encoding of product_category",
      "python_code": "freq_map = df['product_category'].value_counts().to_dict()\ndf['product_category_frequency'] = df['product_category'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.27430636303096184
    },
    {
      "name": "store_id_times_price",
      "type": "interaction",
      "source_columns": [
        "store_id",
        "price"
      ],
      "description": "Multiply interaction between store_id and price",
      "python_code": "df['store_id_times_price'] = df['store_id'] * df['price']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.2706257316793505
    },
    {
      "name": "store_id_over_price",
      "type": "interaction",
      "source_columns": [
        "store_id",
        "price"
      ],
      "description": "Divide interaction between store_id and price",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['price']) > 1e-08\ndf['store_id_over_price'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'store_id_over_price'] = df.loc[mask, 'store_id'] / df.loc[mask, 'price']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.2578663114788377
    },
    {
      "name": "price_times_temperature",
      "type": "interaction",
      "source_columns": [
        "price",
        "temperature"
      ],
      "description": "Multiply interaction between price and temperature",
      "python_code": "df['price_times_temperature'] = df['price'] * df['temperature']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.25072749625059004
    },
    {
      "name": "product_category_is_Food",
      "type": "categorical",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Food",
      "python_code": "df['product_category_is_Food'] = (df['product_category'] == 'Food').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.24826025948264452
    },
    {
      "name": "price_over_discount_percentage",
      "type": "interaction",
      "source_columns": [
        "price",
        "discount_percentage"
      ],
      "description": "Divide interaction between price and discount_percentage",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['discount_percentage']) > 1e-08\ndf['price_over_discount_percentage'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'price_over_discount_percentage'] = df.loc[mask, 'price'] / df.loc[mask, 'discount_percentage']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.2003928552592811
    },
    {
      "name": "price_times_discount_percentage",
      "type": "interaction",
      "source_columns": [
        "price",
        "discount_percentage"
      ],
      "description": "Multiply interaction between price and discount_percentage",
      "python_code": "df['price_times_discount_percentage'] = df['price'] * df['discount_percentage']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.18924604226595812
    },
    {
      "name": "discount_percentage_times_temperature",
      "type": "interaction",
      "source_columns": [
        "discount_percentage",
        "temperature"
      ],
      "description": "Multiply interaction between discount_percentage and temperature",
      "python_code": "df['discount_percentage_times_temperature'] = df['discount_percentage'] * df['temperature']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.18501754756910654
    },
    {
      "name": "product_category_is_Home",
      "type": "categorical",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Home",
      "python_code": "df['product_category_is_Home'] = (df['product_category'] == 'Home').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.1765401218102211
    },
    {
      "name": "price_exp",
      "type": "mathematical",
      "source_columns": [
        "price"
      ],
      "description": "exp transformation of price",
      "python_code": "df['price_exp'] = np.exp(df['price'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.17403668601508374
    },
    {
      "name": "store_id_times_discount_percentage",
      "type": "interaction",
      "source_columns": [
        "store_id",
        "discount_percentage"
      ],
      "description": "Multiply interaction between store_id and discount_percentage",
      "python_code": "df['store_id_times_discount_percentage'] = df['store_id'] * df['discount_percentage']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.17349114983402145
    },
    {
      "name": "discount_percentage_log",
      "type": "mathematical",
      "source_columns": [
        "discount_percentage"
      ],
      "description": "log transformation of discount_percentage",
      "python_code": "df['discount_percentage_log'] = np.log(df['discount_percentage'].clip(lower=1e-8))",
      "formula": "log(x) for x > 0",
      "transformation_type": "log",
      "importance_score": 0.1662301776902279
    },
    {
      "name": "store_id_log",
      "type": "mathematical",
      "source_columns": [
        "store_id"
      ],
      "description": "log transformation of store_id",
      "python_code": "df['store_id_log'] = np.log(df['store_id'].clip(lower=1e-8))",
      "formula": "log(x) for x > 0",
      "transformation_type": "log",
      "importance_score": 0.15785507398444745
    },
    {
      "name": "store_id_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "store_id"
      ],
      "description": "reciprocal transformation of store_id",
      "python_code": "df['store_id_reciprocal'] = 1.0 / (df['store_id'] + 1e-08)",
      "formula": "1 / (x + Îµ)",
      "transformation_type": "reciprocal",
      "importance_score": 0.1564560900600703
    },
    {
      "name": "date_dayofweek",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "dayofweek component of date",
      "python_code": "df['date_dayofweek'] = pd.to_datetime(df['date']).dt.dayofweek",
      "formula": "Extract day of week (0=Monday)",
      "transformation_type": "temporal_component",
      "importance_score": 0.1538493822390262
    },
    {
      "name": "product_category_is_Sports",
      "type": "categorical",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Sports",
      "python_code": "df['product_category_is_Sports'] = (df['product_category'] == 'Sports').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.14751374687747706
    },
    {
      "name": "discount_percentage_binned",
      "type": "mathematical",
      "source_columns": [
        "discount_percentage"
      ],
      "description": "discount_percentage discretized into 10 bins",
      "python_code": "df['discount_percentage_binned'] = pd.qcut(df['discount_percentage'], 10, labels=False, duplicates='drop')",
      "formula": "Quantile-based binning into 10 bins",
      "transformation_type": "binned",
      "importance_score": 0.1469241419789078
    },
    {
      "name": "store_id_cos",
      "type": "mathematical",
      "source_columns": [
        "store_id"
      ],
      "description": "cos transformation of store_id",
      "python_code": "df['store_id_cos'] = np.cos(df['store_id'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.14610204156524295
    },
    {
      "name": "temperature_power_3",
      "type": "mathematical",
      "source_columns": [
        "temperature"
      ],
      "description": "Polynomial degree 3 of temperature",
      "python_code": "df['temperature_power_3'] = df['temperature'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.1444373824876387
    },
    {
      "name": "date_year",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "year component of date",
      "python_code": "df['date_year'] = pd.to_datetime(df['date']).dt.year",
      "formula": "Extract year",
      "transformation_type": "temporal_component",
      "importance_score": 0.14419529837610826
    },
    {
      "name": "store_id_over_discount_percentage",
      "type": "interaction",
      "source_columns": [
        "store_id",
        "discount_percentage"
      ],
      "description": "Divide interaction between store_id and discount_percentage",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['discount_percentage']) > 1e-08\ndf['store_id_over_discount_percentage'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'store_id_over_discount_percentage'] = df.loc[mask, 'store_id'] / df.loc[mask, 'discount_percentage']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.14320681857027864
    },
    {
      "name": "store_type_frequency",
      "type": "categorical",
      "source_columns": [
        "store_type"
      ],
      "description": "Frequency encoding of store_type",
      "python_code": "freq_map = df['store_type'].value_counts().to_dict()\ndf['store_type_frequency'] = df['store_type'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.13634769093886087
    },
    {
      "name": "date_is_weekend",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "is_weekend component of date",
      "python_code": "df['date_is_weekend'] = pd.to_datetime(df['date']).dt.dayofweek.isin([5, 6]).astype(int)",
      "formula": "1 if Saturday/Sunday, 0 otherwise",
      "transformation_type": "temporal_component",
      "importance_score": 0.128123407184704
    },
    {
      "name": "price_sin",
      "type": "mathematical",
      "source_columns": [
        "price"
      ],
      "description": "sin transformation of price",
      "python_code": "df['price_sin'] = np.sin(df['price'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12564814217513123
    },
    {
      "name": "temperature_sin",
      "type": "mathematical",
      "source_columns": [
        "temperature"
      ],
      "description": "sin transformation of temperature",
      "python_code": "df['temperature_sin'] = np.sin(df['temperature'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12404656739768889
    },
    {
      "name": "competitor_price_ratio_power_3",
      "type": "mathematical",
      "source_columns": [
        "competitor_price_ratio"
      ],
      "description": "Polynomial degree 3 of competitor_price_ratio",
      "python_code": "df['competitor_price_ratio_power_3'] = df['competitor_price_ratio'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.123602954942635
    },
    {
      "name": "store_type_is_C",
      "type": "categorical",
      "source_columns": [
        "store_type"
      ],
      "description": "Binary indicator for store_type==C",
      "python_code": "df['store_type_is_C'] = (df['store_type'] == 'C').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.11820621249890832
    },
    {
      "name": "date_quarter",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "quarter component of date",
      "python_code": "df['date_quarter'] = pd.to_datetime(df['date']).dt.quarter",
      "formula": "Extract quarter (1-4)",
      "transformation_type": "temporal_component",
      "importance_score": 0.11443103269388634
    },
    {
      "name": "discount_percentage_over_temperature",
      "type": "interaction",
      "source_columns": [
        "discount_percentage",
        "temperature"
      ],
      "description": "Divide interaction between discount_percentage and temperature",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['temperature']) > 1e-08\ndf['discount_percentage_over_temperature'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'discount_percentage_over_temperature'] = df.loc[mask, 'discount_percentage'] / df.loc[mask, 'temperature']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.11411348594429772
    },
    {
      "name": "store_type_is_A",
      "type": "categorical",
      "source_columns": [
        "store_type"
      ],
      "description": "Binary indicator for store_type==A",
      "python_code": "df['store_type_is_A'] = (df['store_type'] == 'A').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.11098727912799147
    },
    {
      "name": "store_id_sin",
      "type": "mathematical",
      "source_columns": [
        "store_id"
      ],
      "description": "sin transformation of store_id",
      "python_code": "df['store_id_sin'] = np.sin(df['store_id'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.10944572897734131
    },
    {
      "name": "competitor_price_ratio_over_temperature",
      "type": "interaction",
      "source_columns": [
        "competitor_price_ratio",
        "temperature"
      ],
      "description": "Divide interaction between competitor_price_ratio and temperature",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['temperature']) > 1e-08\ndf['competitor_price_ratio_over_temperature'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'competitor_price_ratio_over_temperature'] = df.loc[mask, 'competitor_price_ratio'] / df.loc[mask, 'temperature']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.10285122008615752
    },
    {
      "name": "store_type_is_B",
      "type": "categorical",
      "source_columns": [
        "store_type"
      ],
      "description": "Binary indicator for store_type==B",
      "python_code": "df['store_type_is_B'] = (df['store_type'] == 'B').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.09848386141582655
    },
    {
      "name": "store_id_exp",
      "type": "mathematical",
      "source_columns": [
        "store_id"
      ],
      "description": "exp transformation of store_id",
      "python_code": "df['store_id_exp'] = np.exp(df['store_id'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.09626665089141792
    },
    {
      "name": "store_id_over_temperature",
      "type": "interaction",
      "source_columns": [
        "store_id",
        "temperature"
      ],
      "description": "Divide interaction between store_id and temperature",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['temperature']) > 1e-08\ndf['store_id_over_temperature'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'store_id_over_temperature'] = df.loc[mask, 'store_id'] / df.loc[mask, 'temperature']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.0949822077793705
    },
    {
      "name": "temperature_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "temperature"
      ],
      "description": "reciprocal transformation of temperature",
      "python_code": "df['temperature_reciprocal'] = 1.0 / (df['temperature'] + 1e-08)",
      "formula": "1 / (x + Îµ)",
      "transformation_type": "reciprocal",
      "importance_score": 0.09470904875810092
    },
    {
      "name": "date_day_cos",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "day_cos component of date",
      "python_code": "df['date_day_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['date']).dt.day / 31)",
      "formula": "cos(2Ï * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.09410236555840787
    },
    {
      "name": "product_category_is_Clothing",
      "type": "categorical",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Clothing",
      "python_code": "df['product_category_is_Clothing'] = (df['product_category'] == 'Clothing').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.09132699556061641
    },
    {
      "name": "date_month_cos",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "month_cos component of date",
      "python_code": "df['date_month_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['date']).dt.month / 12)",
      "formula": "cos(2Ï * month / 12)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.08517491539176428
    },
    {
      "name": "temperature_cos",
      "type": "mathematical",
      "source_columns": [
        "temperature"
      ],
      "description": "cos transformation of temperature",
      "python_code": "df['temperature_cos'] = np.cos(df['temperature'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.08293220339149471
    },
    {
      "name": "store_id_times_temperature",
      "type": "interaction",
      "source_columns": [
        "store_id",
        "temperature"
      ],
      "description": "Multiply interaction between store_id and temperature",
      "python_code": "df['store_id_times_temperature'] = df['store_id'] * df['temperature']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.08209734596509473
    },
    {
      "name": "date_day",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "day component of date",
      "python_code": "df['date_day'] = pd.to_datetime(df['date']).dt.day",
      "formula": "Extract day of month (1-31)",
      "transformation_type": "temporal_component",
      "importance_score": 0.07698516009937757
    },
    {
      "name": "date_month_sin",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "month_sin component of date",
      "python_code": "df['date_month_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['date']).dt.month / 12)",
      "formula": "sin(2Ï * month / 12)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.07585537500427698
    },
    {
      "name": "date_day_sin",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "day_sin component of date",
      "python_code": "df['date_day_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['date']).dt.day / 31)",
      "formula": "sin(2Ï * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.070880579151445
    },
    {
      "name": "temperature_exp",
      "type": "mathematical",
      "source_columns": [
        "temperature"
      ],
      "description": "exp transformation of temperature",
      "python_code": "df['temperature_exp'] = np.exp(df['temperature'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.06620056064061343
    },
    {
      "name": "price_cos",
      "type": "mathematical",
      "source_columns": [
        "price"
      ],
      "description": "cos transformation of price",
      "python_code": "df['price_cos'] = np.cos(df['price'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06443712382122352
    }
  ],
  "instructions": {
    "description": "This recipe contains the code to recreate the selected features",
    "usage": "Apply the python_code for each feature in the order listed",
    "requirements": [
      "pandas",
      "numpy",
      "scikit-learn"
    ]
  }
}