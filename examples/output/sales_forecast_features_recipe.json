{
  "dataset_info": {
    "total_features_selected": 32,
    "original_features_selected": 4,
    "engineered_features_selected": 28,
    "feature_reduction": "43.9%"
  },
  "original_features": [
    {
      "name": "product_category",
      "importance": 0.3171,
      "data_type": "original"
    },
    {
      "name": "is_rainy",
      "importance": 0.12,
      "data_type": "original"
    },
    {
      "name": "store_type",
      "importance": 0.0359,
      "data_type": "original"
    },
    {
      "name": "date",
      "importance": 0.0197,
      "data_type": "original"
    }
  ],
  "engineered_features": [
    {
      "name": "price_over_competitor_price_ratio",
      "importance": 0.5828,
      "type": "ratio",
      "source_columns": [
        "price",
        "competitor_price_ratio"
      ],
      "description": "Ratio of price to competitor_price_ratio",
      "python_code": "df['price_over_competitor_price_ratio'] = df['price'] / (df['competitor_price_ratio'] + 1e-8)",
      "formula": "f(x,y) = x / y - captures proportional relationships"
    },
    {
      "name": "store_id_times_price",
      "importance": 0.2728,
      "type": "interaction",
      "source_columns": [
        "store_id",
        "price"
      ],
      "description": "Multiplication interaction between store_id and price",
      "python_code": "df['store_id_times_price'] = df['store_id'] * df['price']",
      "formula": "f(x,y) = x * y - captures multiplicative effects"
    },
    {
      "name": "product_category_is_Electronics",
      "importance": 0.2728,
      "type": "one_hot",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Electronics",
      "python_code": "df['product_category_is_Electronics'] = (df['product_category'] == 'Electronics').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "product_category_frequency",
      "importance": 0.2711,
      "type": "frequency_encoded",
      "source_columns": [
        "product_category"
      ],
      "description": "Frequency encoding of product_category",
      "python_code": "freq_map = df['product_category'].value_counts().to_dict()\ndf['product_category_frequency'] = df['product_category'].map(freq_map)",
      "formula": "Maps each category to its occurrence frequency"
    },
    {
      "name": "store_id_over_price",
      "importance": 0.2605,
      "type": "ratio",
      "source_columns": [
        "store_id",
        "price"
      ],
      "description": "Ratio of store_id to price",
      "python_code": "df['store_id_over_price'] = df['store_id'] / (df['price'] + 1e-8)",
      "formula": "f(x,y) = x / y - captures proportional relationships"
    },
    {
      "name": "product_category_is_Food",
      "importance": 0.2574,
      "type": "one_hot",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Food",
      "python_code": "df['product_category_is_Food'] = (df['product_category'] == 'Food').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "price_times_discount_percentage",
      "importance": 0.1968,
      "type": "interaction",
      "source_columns": [
        "price",
        "discount_percentage"
      ],
      "description": "Multiplication interaction between price and discount_percentage",
      "python_code": "df['price_times_discount_percentage'] = df['price'] * df['discount_percentage']",
      "formula": "f(x,y) = x * y - captures multiplicative effects"
    },
    {
      "name": "discount_percentage_sqrt",
      "importance": 0.1889,
      "type": "sqrt_transform",
      "source_columns": [
        "discount_percentage"
      ],
      "description": "Square root transform of discount_percentage",
      "python_code": "df['discount_percentage_sqrt'] = np.sqrt(df['discount_percentage'].fillna(0))",
      "formula": "f(x) = \u221ax - mild variance stabilization"
    },
    {
      "name": "product_category_is_Home",
      "importance": 0.1793,
      "type": "one_hot",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Home",
      "python_code": "df['product_category_is_Home'] = (df['product_category'] == 'Home').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "store_id_times_discount_percentage",
      "importance": 0.177,
      "type": "interaction",
      "source_columns": [
        "store_id",
        "discount_percentage"
      ],
      "description": "Multiplication interaction between store_id and discount_percentage",
      "python_code": "df['store_id_times_discount_percentage'] = df['store_id'] * df['discount_percentage']",
      "formula": "f(x,y) = x * y - captures multiplicative effects"
    },
    {
      "name": "discount_percentage_binned",
      "importance": 0.1586,
      "type": "binned",
      "source_columns": [
        "discount_percentage"
      ],
      "description": "discount_percentage discretized into 10 bins",
      "python_code": "df['discount_percentage_binned'] = pd.qcut(df['discount_percentage'], 10, labels=False, duplicates='drop')",
      "formula": "Equal-width binning into 10 categories"
    },
    {
      "name": "store_id_sqrt",
      "importance": 0.1517,
      "type": "sqrt_transform",
      "source_columns": [
        "store_id"
      ],
      "description": "Square root transform of store_id",
      "python_code": "df['store_id_sqrt'] = np.sqrt(df['store_id'].fillna(0))",
      "formula": "f(x) = \u221ax - mild variance stabilization"
    },
    {
      "name": "date_dayofweek",
      "importance": 0.1493,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Day of week (0=Monday)",
      "python_code": "df['date_dayofweek'] = pd.to_datetime(df['date']).dt.dayofweek",
      "formula": "Extracts day of week"
    },
    {
      "name": "store_type_is_C",
      "importance": 0.149,
      "type": "one_hot",
      "source_columns": [
        "store_type"
      ],
      "description": "Binary indicator for store_type==C",
      "python_code": "df['store_type_is_C'] = (df['store_type'] == 'C').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "date_year",
      "importance": 0.1463,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Year component",
      "python_code": "df['date_year'] = pd.to_datetime(df['date']).dt.year",
      "formula": "Extracts year as integer"
    },
    {
      "name": "product_category_is_Sports",
      "importance": 0.1455,
      "type": "one_hot",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Sports",
      "python_code": "df['product_category_is_Sports'] = (df['product_category'] == 'Sports').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "temperature_cubed",
      "importance": 0.1423,
      "type": "polynomial",
      "source_columns": [
        "temperature"
      ],
      "description": "Cube of temperature",
      "python_code": "df['temperature_cubed'] = df['temperature'] ** 3",
      "formula": "f(x) = x\u00b3 - captures cubic relationships"
    },
    {
      "name": "store_type_frequency",
      "importance": 0.1397,
      "type": "frequency_encoded",
      "source_columns": [
        "store_type"
      ],
      "description": "Frequency encoding of store_type",
      "python_code": "freq_map = df['store_type'].value_counts().to_dict()\ndf['store_type_frequency'] = df['store_type'].map(freq_map)",
      "formula": "Maps each category to its occurrence frequency"
    },
    {
      "name": "product_category_is_Clothing",
      "importance": 0.1305,
      "type": "one_hot",
      "source_columns": [
        "product_category"
      ],
      "description": "Binary indicator for product_category==Clothing",
      "python_code": "df['product_category_is_Clothing'] = (df['product_category'] == 'Clothing').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "competitor_price_ratio_squared",
      "importance": 0.1197,
      "type": "polynomial",
      "source_columns": [
        "competitor_price_ratio"
      ],
      "description": "Square of competitor_price_ratio",
      "python_code": "df['competitor_price_ratio_squared'] = df['competitor_price_ratio'] ** 2",
      "formula": "f(x) = x\u00b2 - captures quadratic relationships"
    },
    {
      "name": "date_month_cos",
      "importance": 0.103,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Cosine encoding of month",
      "python_code": "df['date_month_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['date']).dt.month / 12)",
      "formula": "cos(2\u03c0 * month / 12) - captures cyclical nature"
    },
    {
      "name": "date_is_weekend",
      "importance": 0.0981,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Binary indicator for weekend",
      "python_code": "df['date_is_weekend'] = pd.to_datetime(df['date']).dt.dayofweek.isin([5, 6]).astype(int)",
      "formula": "1 if Saturday/Sunday, 0 otherwise"
    },
    {
      "name": "store_type_is_A",
      "importance": 0.0865,
      "type": "one_hot",
      "source_columns": [
        "store_type"
      ],
      "description": "Binary indicator for store_type==A",
      "python_code": "df['store_type_is_A'] = (df['store_type'] == 'A').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "date_month",
      "importance": 0.0829,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Month component (1-12)",
      "python_code": "df['date_month'] = pd.to_datetime(df['date']).dt.month",
      "formula": "Extracts month as integer"
    },
    {
      "name": "store_id_times_temperature",
      "importance": 0.0819,
      "type": "interaction",
      "source_columns": [
        "store_id",
        "temperature"
      ],
      "description": "Multiplication interaction between store_id and temperature",
      "python_code": "df['store_id_times_temperature'] = df['store_id'] * df['temperature']",
      "formula": "f(x,y) = x * y - captures multiplicative effects"
    },
    {
      "name": "date_month_sin",
      "importance": 0.077,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Sine encoding of month",
      "python_code": "df['date_month_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['date']).dt.month / 12)",
      "formula": "sin(2\u03c0 * month / 12) - captures cyclical nature"
    },
    {
      "name": "store_type_is_B",
      "importance": 0.0759,
      "type": "one_hot",
      "source_columns": [
        "store_type"
      ],
      "description": "Binary indicator for store_type==B",
      "python_code": "df['store_type_is_B'] = (df['store_type'] == 'B').astype(int)",
      "formula": "1 if category matches, 0 otherwise"
    },
    {
      "name": "date_day",
      "importance": 0.0662,
      "type": "date_component",
      "source_columns": [
        "date"
      ],
      "description": "Day of month (1-31)",
      "python_code": "df['date_day'] = pd.to_datetime(df['date']).dt.day",
      "formula": "Extracts day as integer"
    }
  ],
  "usage_instructions": {
    "description": "To recreate these features, use the Python code provided for each engineered feature.",
    "required_imports": [
      "import pandas as pd",
      "import numpy as np"
    ],
    "example": "df[feature_name] = <python_code_from_recipe>"
  }
}