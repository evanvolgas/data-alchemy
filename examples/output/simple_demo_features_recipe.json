{
  "metadata": {
    "version": "1.0",
    "created_by": "DataAlchemy",
    "total_features": 34,
    "original_features": 5,
    "engineered_features": 48
  },
  "features": [
    {
      "name": "feature_1_times_feature_2",
      "type": "interaction",
      "source_columns": [
        "feature_1",
        "feature_2"
      ],
      "description": "Multiply interaction between feature_1 and feature_2",
      "python_code": "df['feature_1_times_feature_2'] = df['feature_1'] * df['feature_2']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.35010939737523833
    },
    {
      "name": "feature_1_sqrt",
      "type": "mathematical",
      "source_columns": [
        "feature_1"
      ],
      "description": "sqrt transformation of feature_1",
      "python_code": "df['feature_1_sqrt'] = np.sqrt(df['feature_1'].clip(lower=0))",
      "formula": "sqrt(x) for x >= 0",
      "transformation_type": "sqrt",
      "importance_score": 0.3456243504692402
    },
    {
      "name": "feature_1_over_feature_3",
      "type": "interaction",
      "source_columns": [
        "feature_1",
        "feature_3"
      ],
      "description": "Divide interaction between feature_1 and feature_3",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['feature_3']) > 1e-08\ndf['feature_1_over_feature_3'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'feature_1_over_feature_3'] = df.loc[mask, 'feature_1'] / df.loc[mask, 'feature_3']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.2231274247484603
    },
    {
      "name": "feature_2_binned",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "feature_2 discretized into 10 bins",
      "python_code": "df['feature_2_binned'] = pd.qcut(df['feature_2'], 10, labels=False, duplicates='drop')",
      "formula": "Quantile-based binning into 10 bins",
      "transformation_type": "binned",
      "importance_score": 0.21050115135490122
    },
    {
      "name": "feature_2_log",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "log transformation of feature_2",
      "python_code": "df['feature_2_log'] = np.log(df['feature_2'].clip(lower=1e-8))",
      "formula": "log(x) for x > 0",
      "transformation_type": "log",
      "importance_score": 0.19352026463150088
    },
    {
      "name": "feature_2_power_3",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "Polynomial degree 3 of feature_2",
      "python_code": "df['feature_2_power_3'] = df['feature_2'] ** 3",
      "formula": "f(x) = x^3",
      "transformation_type": "polynomial",
      "importance_score": 0.16851339629771156
    },
    {
      "name": "feature_1_times_feature_3",
      "type": "interaction",
      "source_columns": [
        "feature_1",
        "feature_3"
      ],
      "description": "Multiply interaction between feature_1 and feature_3",
      "python_code": "df['feature_1_times_feature_3'] = df['feature_1'] * df['feature_3']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.16785659934371852
    },
    {
      "name": "feature_1_over_feature_2",
      "type": "interaction",
      "source_columns": [
        "feature_1",
        "feature_2"
      ],
      "description": "Divide interaction between feature_1 and feature_2",
      "python_code": "# Safe division to avoid explosion from small denominators\nmask = np.abs(df['feature_2']) > 1e-08\ndf['feature_1_over_feature_2'] = 0.0  # Initialize with zeros\ndf.loc[mask, 'feature_1_over_feature_2'] = df.loc[mask, 'feature_1'] / df.loc[mask, 'feature_2']",
      "formula": "f(x,y) = x / y (safe division)",
      "transformation_type": "interaction",
      "importance_score": 0.15617103734593885
    },
    {
      "name": "feature_2_exp",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "exp transformation of feature_2",
      "python_code": "df['feature_2_exp'] = np.exp(df['feature_2'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.14716175036897083
    },
    {
      "name": "feature_2_times_feature_3",
      "type": "interaction",
      "source_columns": [
        "feature_2",
        "feature_3"
      ],
      "description": "Multiply interaction between feature_2 and feature_3",
      "python_code": "df['feature_2_times_feature_3'] = df['feature_2'] * df['feature_3']",
      "formula": "f(x,y) = x * y",
      "transformation_type": "interaction",
      "importance_score": 0.1323840428625257
    },
    {
      "name": "feature_1_sin",
      "type": "mathematical",
      "source_columns": [
        "feature_1"
      ],
      "description": "sin transformation of feature_1",
      "python_code": "df['feature_1_sin'] = np.sin(df['feature_1'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12949387736010934
    },
    {
      "name": "feature_2_sin",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "sin transformation of feature_2",
      "python_code": "df['feature_2_sin'] = np.sin(df['feature_2'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.12491593620568484
    },
    {
      "name": "feature_3_power_2",
      "type": "mathematical",
      "source_columns": [
        "feature_3"
      ],
      "description": "Polynomial degree 2 of feature_3",
      "python_code": "df['feature_3_power_2'] = df['feature_3'] ** 2",
      "formula": "f(x) = x^2",
      "transformation_type": "polynomial",
      "importance_score": 0.1136228177702351
    },
    {
      "name": "feature_3_sin",
      "type": "mathematical",
      "source_columns": [
        "feature_3"
      ],
      "description": "sin transformation of feature_3",
      "python_code": "df['feature_3_sin'] = np.sin(df['feature_3'])",
      "formula": "sin(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.10507311823256132
    },
    {
      "name": "date_month_cos",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "month_cos component of date",
      "python_code": "df['date_month_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['date']).dt.month / 12)",
      "formula": "cos(2π * month / 12)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.10260395328008992
    },
    {
      "name": "date_month",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "month component of date",
      "python_code": "df['date_month'] = pd.to_datetime(df['date']).dt.month",
      "formula": "Extract month (1-12)",
      "transformation_type": "temporal_component",
      "importance_score": 0.10003238054209804
    },
    {
      "name": "feature_3_cos",
      "type": "mathematical",
      "source_columns": [
        "feature_3"
      ],
      "description": "cos transformation of feature_3",
      "python_code": "df['feature_3_cos'] = np.cos(df['feature_3'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.09734222411418776
    },
    {
      "name": "date_day_cos",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "day_cos component of date",
      "python_code": "df['date_day_cos'] = np.cos(2 * np.pi * pd.to_datetime(df['date']).dt.day / 31)",
      "formula": "cos(2π * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.09547540893947616
    },
    {
      "name": "date_month_sin",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "month_sin component of date",
      "python_code": "df['date_month_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['date']).dt.month / 12)",
      "formula": "sin(2π * month / 12)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.09513516856907535
    },
    {
      "name": "category_is_A",
      "type": "categorical",
      "source_columns": [
        "category"
      ],
      "description": "Binary indicator for category==A",
      "python_code": "df['category_is_A'] = (df['category'] == 'A').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.09504227719534748
    },
    {
      "name": "date_day",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "day component of date",
      "python_code": "df['date_day'] = pd.to_datetime(df['date']).dt.day",
      "formula": "Extract day of month (1-31)",
      "transformation_type": "temporal_component",
      "importance_score": 0.09487094904248645
    },
    {
      "name": "category_is_B",
      "type": "categorical",
      "source_columns": [
        "category"
      ],
      "description": "Binary indicator for category==B",
      "python_code": "df['category_is_B'] = (df['category'] == 'B').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.09335360726586968
    },
    {
      "name": "date_year",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "year component of date",
      "python_code": "df['date_year'] = pd.to_datetime(df['date']).dt.year",
      "formula": "Extract year",
      "transformation_type": "temporal_component",
      "importance_score": 0.09093799663959604
    },
    {
      "name": "feature_1_exp",
      "type": "mathematical",
      "source_columns": [
        "feature_1"
      ],
      "description": "exp transformation of feature_1",
      "python_code": "df['feature_1_exp'] = np.exp(df['feature_1'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.0836259986573508
    },
    {
      "name": "category_is_C",
      "type": "categorical",
      "source_columns": [
        "category"
      ],
      "description": "Binary indicator for category==C",
      "python_code": "df['category_is_C'] = (df['category'] == 'C').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.08198813301556938
    },
    {
      "name": "date_dayofweek",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "dayofweek component of date",
      "python_code": "df['date_dayofweek'] = pd.to_datetime(df['date']).dt.dayofweek",
      "formula": "Extract day of week (0=Monday)",
      "transformation_type": "temporal_component",
      "importance_score": 0.0786709334280285
    },
    {
      "name": "feature_2_cos",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "cos transformation of feature_2",
      "python_code": "df['feature_2_cos'] = np.cos(df['feature_2'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.07658909194569205
    },
    {
      "name": "feature_1_cos",
      "type": "mathematical",
      "source_columns": [
        "feature_1"
      ],
      "description": "cos transformation of feature_1",
      "python_code": "df['feature_1_cos'] = np.cos(df['feature_1'])",
      "formula": "cos(x)",
      "transformation_type": "trigonometric",
      "importance_score": 0.06693564482362567
    },
    {
      "name": "date_day_sin",
      "type": "temporal",
      "source_columns": [
        "date"
      ],
      "description": "day_sin component of date",
      "python_code": "df['date_day_sin'] = np.sin(2 * np.pi * pd.to_datetime(df['date']).dt.day / 31)",
      "formula": "sin(2π * day / 31)",
      "transformation_type": "temporal_cyclical",
      "importance_score": 0.0638941194571742
    },
    {
      "name": "category_is_D",
      "type": "categorical",
      "source_columns": [
        "category"
      ],
      "description": "Binary indicator for category==D",
      "python_code": "df['category_is_D'] = (df['category'] == 'D').astype(int)",
      "formula": "1 if value matches, 0 otherwise",
      "transformation_type": "one_hot",
      "importance_score": 0.06370276256498399
    },
    {
      "name": "feature_2_reciprocal",
      "type": "mathematical",
      "source_columns": [
        "feature_2"
      ],
      "description": "reciprocal transformation of feature_2",
      "python_code": "df['feature_2_reciprocal'] = 1.0 / (df['feature_2'] + 1e-08)",
      "formula": "1 / (x + ε)",
      "transformation_type": "reciprocal",
      "importance_score": 0.0634580833209399
    },
    {
      "name": "category_frequency",
      "type": "categorical",
      "source_columns": [
        "category"
      ],
      "description": "Frequency encoding of category",
      "python_code": "freq_map = df['category'].value_counts().to_dict()\ndf['category_frequency'] = df['category'].map(freq_map)",
      "formula": "Count of each category value",
      "transformation_type": "frequency_encoded",
      "importance_score": 0.06335336321770685
    },
    {
      "name": "feature_3_exp",
      "type": "mathematical",
      "source_columns": [
        "feature_3"
      ],
      "description": "exp transformation of feature_3",
      "python_code": "df['feature_3_exp'] = np.exp(df['feature_3'].clip(upper=10.0))",
      "formula": "exp(x)",
      "transformation_type": "exponential",
      "importance_score": 0.06261956554340214
    },
    {
      "name": "date_is_weekend",
      "type": "engineered",
      "source_columns": [
        "date"
      ],
      "description": "is_weekend component of date",
      "python_code": "df['date_is_weekend'] = pd.to_datetime(df['date']).dt.dayofweek.isin([5, 6]).astype(int)",
      "formula": "1 if Saturday/Sunday, 0 otherwise",
      "transformation_type": "temporal_component",
      "importance_score": 0.062152596068989284
    }
  ],
  "instructions": {
    "description": "This recipe contains the code to recreate the selected features",
    "usage": "Apply the python_code for each feature in the order listed",
    "requirements": [
      "pandas",
      "numpy",
      "scikit-learn"
    ]
  }
}